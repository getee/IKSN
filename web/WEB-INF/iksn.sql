SET SESSION FOREIGN_KEY_CHECKS=0;

/* Drop Tables */

DROP TABLE IF EXISTS ATTENTION;
DROP TABLE IF EXISTS BLOGBROWSED;
DROP TABLE IF EXISTS BLOGCOMMENTS;
DROP TABLE IF EXISTS BLOGTAG;
DROP TABLE IF EXISTS COLLECTBLOG;
DROP TABLE IF EXISTS ILLEGALBLOG;
DROP TABLE IF EXISTS REPORTBLOG;
DROP TABLE IF EXISTS USERTOBLOG;
DROP TABLE IF EXISTS BLOG;
DROP TABLE IF EXISTS COLLECTRESOURCE;
DROP TABLE IF EXISTS DOWNRESOURCES;
DROP TABLE IF EXISTS ILLEGALRESOURCE;
DROP TABLE IF EXISTS MESSAGE;
DROP TABLE IF EXISTS NOTICE;
DROP TABLE IF EXISTS REPORTRESOURCE;
DROP TABLE IF EXISTS RESOURCEBROWSED;
DROP TABLE IF EXISTS RESOURCECOMMENTS;
DROP TABLE IF EXISTS RESOURCETAG;
DROP TABLE IF EXISTS RESOURCE;
DROP TABLE IF EXISTS SCORING;
DROP TABLE IF EXISTS USERINFO;
DROP TABLE IF EXISTS USER;




/* Create Tables */

CREATE TABLE ATTENTION
(
	-- 关注表id
	ID INT NOT NULL AUTO_INCREMENT COMMENT '关注表id',
	-- 本用户id
	SELFID INT NOT NULL COMMENT '本用户id',
	-- 被关注用户id
	ATTENID INT NOT NULL COMMENT '被关注用户id',
	PRIMARY KEY (ID)
);


CREATE TABLE BLOG
(
	-- 博客id
	BID INT NOT NULL AUTO_INCREMENT COMMENT '博客id',
	-- 博客标题  
	TITLE VARCHAR(50) NOT NULL COMMENT '博客标题  ',
	-- 博客内容,根据富文本制定
	CONTENT TEXT COMMENT '博客内容,根据富文本制定',
	-- 博客发布时间
	TIME VARCHAR(50) NOT NULL COMMENT '博客发布时间',
	-- 博客链接
	LINK VARCHAR(200) COMMENT '博客链接',
	-- 博客点赞数  
	POINTS INT DEFAULT 0 COMMENT '博客点赞数  ',
	-- 博客分类
	CLASSIFY INT COMMENT '博客分类',
	-- 举报数量
	REPORTNUM INT DEFAULT 0 COMMENT '举报数量',
	PRIMARY KEY (BID)
);


CREATE TABLE BLOGBROWSED
(
	-- 浏览记录id
	ID INT NOT NULL AUTO_INCREMENT COMMENT '浏览记录id',
	--  用户id
	UID INT NOT NULL COMMENT ' 用户id',
	-- 博客id
	BID INT NOT NULL COMMENT '博客id',
	-- 浏览时间
	BROWSETIME VARCHAR(50) NOT NULL COMMENT '浏览时间',
	PRIMARY KEY (ID)
);


CREATE TABLE BLOGCOMMENTS
(
	-- 单条评论id
	ID INT NOT NULL AUTO_INCREMENT COMMENT '单条评论id',
	-- blogid
	BID INT NOT NULL COMMENT 'blogid',
	-- 用户id
	UID INT NOT NULL COMMENT '用户id',
	-- 评论id,针对哪条评论进行回复，可为空
	COMMENTID INT COMMENT '评论id,针对哪条评论进行回复，可为空',
	-- 评论时间
	TIME VARCHAR(50) COMMENT '评论时间',
	-- 评论内容
	CONTENT VARCHAR(200) COMMENT '评论内容',
	-- 层数
	FLOOR INT DEFAULT 1 COMMENT '层数',
	PRIMARY KEY (ID)
);


CREATE TABLE BLOGTAG
(
	-- 博客标签id
	ID INT NOT NULL AUTO_INCREMENT COMMENT '博客标签id',
	-- 博客id
	BID INT NOT NULL COMMENT '博客id',
	-- 博客标签
	BTAG VARCHAR(50) COMMENT '博客标签',
	PRIMARY KEY (ID)
);


CREATE TABLE COLLECTBLOG
(
	-- 收藏博客表
	ID INT NOT NULL AUTO_INCREMENT COMMENT '收藏博客表',
	-- 用户id
	UID INT NOT NULL COMMENT '用户id',
	-- 博客id
	BID INT NOT NULL COMMENT '博客id',
	PRIMARY KEY (ID)
);


CREATE TABLE COLLECTRESOURCE
(
	-- 收藏资源id
	ID INT NOT NULL AUTO_INCREMENT COMMENT '收藏资源id',
	-- 用户id
	UID INT NOT NULL COMMENT '用户id',
	-- 资源id
	RID INT NOT NULL COMMENT '资源id',
	PRIMARY KEY (ID)
);


CREATE TABLE DOWNRESOURCES
(
	-- 下载资源id
	ID INT NOT NULL AUTO_INCREMENT COMMENT '下载资源id',
	-- 用户id
	UID INT NOT NULL COMMENT '用户id',
	-- 资源id
	RID INT NOT NULL COMMENT '资源id',
	-- 时间
	TIME VARCHAR(50) NOT NULL COMMENT '时间',
	PRIMARY KEY (ID)
);


CREATE TABLE ILLEGALBLOG
(
	ID INT NOT NULL AUTO_INCREMENT,
	-- 违规博客id
	BID INT NOT NULL COMMENT '违规博客id',
	-- 违规原因
	ILLEGALCAUSE VARCHAR(200) NOT NULL COMMENT '违规原因',
	PRIMARY KEY (ID)
);


CREATE TABLE ILLEGALRESOURCE
(
	ID INT NOT NULL AUTO_INCREMENT,
	-- 资源id
	RID INT NOT NULL COMMENT '资源id',
	-- 违规原因
	ILLEGALCAUSE VARCHAR(200) NOT NULL COMMENT '违规原因',
	PRIMARY KEY (ID)
);


CREATE TABLE MESSAGE
(
	-- 消息表id
	ID INT NOT NULL AUTO_INCREMENT COMMENT '消息表id',
	-- 发送用户id
	FROMID INT NOT NULL COMMENT '发送用户id',
	-- 接收用户id
	TOID INT NOT NULL COMMENT '接收用户id',
	-- 消息内容
	CONTENT TEXT COMMENT '消息内容',
	-- 日期
	TIME VARCHAR(50) COMMENT '日期',
	-- 是否已读
	ISREAD INT DEFAULT 0 NOT NULL COMMENT '是否已读',
	PRIMARY KEY (ID)
);


CREATE TABLE NOTICE
(
	ID INT NOT NULL AUTO_INCREMENT,
	-- 用户id
	UID INT NOT NULL COMMENT '用户id',
	CONTENT VARCHAR(200),
	TIME VARCHAR(50),
	ISREAD INT DEFAULT 0,
	-- 通知类型，暂用不上
	TYPE INT DEFAULT 0 COMMENT '通知类型，暂用不上',
	PRIMARY KEY (ID)
);


CREATE TABLE REPORTBLOG
(
	ID INT NOT NULL AUTO_INCREMENT,
	-- 举报者id（userid）
	UID INT NOT NULL COMMENT '举报者id（userid）',
	-- 博客id
	BID INT NOT NULL COMMENT '博客id',
	-- 举报原因
	REASON VARCHAR(200) COMMENT '举报原因',
	PRIMARY KEY (ID)
);


CREATE TABLE REPORTRESOURCE
(
	ID INT NOT NULL AUTO_INCREMENT,
	-- 举报者id（userid）
	UID INT NOT NULL COMMENT '举报者id（userid）',
	-- 资源id
	RID INT NOT NULL COMMENT '资源id',
	REASON VARCHAR(200),
	PRIMARY KEY (ID)
);


CREATE TABLE RESOURCE
(
	RID INT NOT NULL AUTO_INCREMENT,
	-- 用户id
	UID INT NOT NULL COMMENT '用户id',
	NAME VARCHAR(50) NOT NULL,
	-- md5码
	MD5 VARCHAR(200) COMMENT 'md5码',
	-- sha码
	SHA VARCHAR(200) COMMENT 'sha码',
	-- 资源路径
	PATH VARCHAR(200) NOT NULL COMMENT '资源路径',
	-- 所需积分值
	SCORING INT NOT NULL COMMENT '所需积分值',
	-- 资源分类：固定类
	CLASSIFY INT COMMENT '资源分类：固定类',
	-- 资源介绍
	INTRODUCE VARCHAR(99) COMMENT '资源介绍',
	TIME VARCHAR(50),
	PRIMARY KEY (RID)
);


CREATE TABLE RESOURCEBROWSED
(
	-- 浏览记录id
	ID INT NOT NULL AUTO_INCREMENT COMMENT '浏览记录id',
	--  用户id
	UID INT NOT NULL COMMENT ' 用户id',
	-- 资源id
	RID INT NOT NULL COMMENT '资源id',
	-- 浏览时间
	BROWSETIME VARCHAR(50) NOT NULL COMMENT '浏览时间',
	PRIMARY KEY (ID)
);


CREATE TABLE RESOURCECOMMENTS
(
	ID INT NOT NULL AUTO_INCREMENT,
	-- 资源id
	RID INT NOT NULL COMMENT '资源id',
	-- 下载者id
	UID INT NOT NULL COMMENT '下载者id',
	-- 打星星评价
	STAR INT DEFAULT 0 NOT NULL COMMENT '打星星评价',
	-- 评论
	COMMENT VARCHAR(200) COMMENT '评论',
	PRIMARY KEY (ID)
);


CREATE TABLE RESOURCETAG
(
	ID INT NOT NULL AUTO_INCREMENT,
	RID INT NOT NULL,
	-- 资源自定义标签
	RTAG VARCHAR(20) COMMENT '资源自定义标签',
	PRIMARY KEY (ID)
);


CREATE TABLE SCORING
(
	-- 积分记录表
	ID INT NOT NULL AUTO_INCREMENT COMMENT '积分记录表',
	-- 用户id
	UID INT NOT NULL COMMENT '用户id',
	-- 判断增加或减少
	STATE INT(1) NOT NULL COMMENT '判断增加或减少',
	-- 积分数量
	NUMBER INT NOT NULL COMMENT '积分数量',
	-- 操作内容
	OPERATION VARCHAR(50) COMMENT '操作内容',
	-- 日期
	TIME VARCHAR(50) COMMENT '日期',
	PRIMARY KEY (ID)
);


CREATE TABLE USER
(
	-- 用户id
	UID INT NOT NULL AUTO_INCREMENT COMMENT '用户id',
	-- 邮箱
	EMAIL VARCHAR(50) COMMENT '邮箱',
	-- 手机号
	PHONE VARCHAR(11) COMMENT '手机号',
	-- 密码
	PASSWORD VARCHAR(100) NOT NULL COMMENT '密码',
	-- 昵称
	NICKNAME VARCHAR(20) COMMENT '昵称',
	-- 性别
	SEX INT COMMENT '性别',
	-- 介绍
	INTRODUCE VARCHAR(200) COMMENT '介绍',
	-- 等级
	GRADE INT DEFAULT 0 COMMENT '等级',
	-- 积分
	SCORE INT DEFAULT 0 COMMENT '积分',
	-- 是否是管理员
	ISADMIN INT DEFAULT 0 NOT NULL COMMENT '是否是管理员',
	-- 是否被禁言
	ISSPEAK INT DEFAULT 0 COMMENT '是否被禁言',
	-- 禁言截止时间
	TIMEOFBAN VARCHAR(50) COMMENT '禁言截止时间',
	-- 头像
	PICTUREPATH VARCHAR(200) DEFAULT 'img/moren.jpg' COMMENT '头像',
	PRIMARY KEY (UID),
	UNIQUE (EMAIL),
	UNIQUE (PHONE)
);


CREATE TABLE USERINFO
(
	ID INT NOT NULL,
	-- 用户id
	UID INT NOT NULL COMMENT '用户id',
	-- 登录IP
	LOGINIP VARCHAR(50) COMMENT '登录IP',
	PRIMARY KEY (ID)
);


CREATE TABLE USERTOBLOG
(
	ID INT NOT NULL AUTO_INCREMENT,
	-- 用户id
	UID INT NOT NULL COMMENT '用户id',
	-- blogid
	BID INT NOT NULL COMMENT 'blogid',
	-- 是否存入草稿箱
	ISDRAFT INT NOT NULL COMMENT '是否存入草稿箱',
	-- 是否公开博客
	ISPUBLIC INT NOT NULL COMMENT '是否公开博客',
	-- 是否原创,翻译，转载..
	BLOGTYPE INT NOT NULL COMMENT '是否原创,翻译，转载..',
	PRIMARY KEY (ID)
);



/* Create Foreign Keys */

ALTER TABLE BLOGBROWSED
	ADD FOREIGN KEY (BID)
	REFERENCES BLOG (BID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE BLOGCOMMENTS
	ADD FOREIGN KEY (BID)
	REFERENCES BLOG (BID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE BLOGTAG
	ADD FOREIGN KEY (BID)
	REFERENCES BLOG (BID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE COLLECTBLOG
	ADD FOREIGN KEY (BID)
	REFERENCES BLOG (BID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE ILLEGALBLOG
	ADD FOREIGN KEY (BID)
	REFERENCES BLOG (BID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE REPORTBLOG
	ADD FOREIGN KEY (BID)
	REFERENCES BLOG (BID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE USERTOBLOG
	ADD FOREIGN KEY (BID)
	REFERENCES BLOG (BID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE BLOGCOMMENTS
	ADD FOREIGN KEY (COMMENTID)
	REFERENCES BLOGCOMMENTS (ID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE COLLECTRESOURCE
	ADD FOREIGN KEY (RID)
	REFERENCES RESOURCE (RID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE DOWNRESOURCES
	ADD FOREIGN KEY (RID)
	REFERENCES RESOURCE (RID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE ILLEGALRESOURCE
	ADD FOREIGN KEY (RID)
	REFERENCES RESOURCE (RID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE REPORTRESOURCE
	ADD FOREIGN KEY (RID)
	REFERENCES RESOURCE (RID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE RESOURCEBROWSED
	ADD FOREIGN KEY (RID)
	REFERENCES RESOURCE (RID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE RESOURCECOMMENTS
	ADD FOREIGN KEY (RID)
	REFERENCES RESOURCE (RID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE RESOURCETAG
	ADD FOREIGN KEY (RID)
	REFERENCES RESOURCE (RID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE ATTENTION
	ADD FOREIGN KEY (ATTENID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE ATTENTION
	ADD FOREIGN KEY (SELFID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE BLOGBROWSED
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE BLOGCOMMENTS
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE COLLECTBLOG
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE COLLECTRESOURCE
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE DOWNRESOURCES
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE MESSAGE
	ADD FOREIGN KEY (FROMID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE MESSAGE
	ADD FOREIGN KEY (TOID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE NOTICE
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE REPORTBLOG
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE REPORTRESOURCE
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE RESOURCE
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE RESOURCEBROWSED
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE RESOURCECOMMENTS
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE SCORING
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE USERINFO
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;


ALTER TABLE USERTOBLOG
	ADD FOREIGN KEY (UID)
	REFERENCES USER (UID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;



